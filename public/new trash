// components/ProductSection.js
'use client';

import { useState, useEffect } from 'react';

// Product Card Component
export function ProductCard({ title, creator, price, oldPrice, imageSrc, onAddToCart, onBuyNow }) {
  return (
    <div className="relative rounded-2xl overflow-hidden bg-black/20 backdrop-blur-md border border-white/20 p-3 md:p-4 flex gap-3 md:gap-4">
      <div className="flex-shrink-0 w-2/5 md:w-3/5">
        <img 
          src={imageSrc} 
          alt={title} 
          className="h-16 md:h-40 w-auto object-contain" 
        />
      </div>

      <div className="flex-shrink-0 flex flex-col justify-between overflow-hidden w-3/5 md:w-2/5">
        <div>
          <h3 className="text-sm md:text-xl font-bold text-white truncate font-glacial">{title}</h3>
          <p className="text-xs md:text-sm text-white/70 truncate font-glacial">{creator}</p>
          <div className="flex flex-col items-start gap-1 mt-2">
            <span className="text-red-400 line-through text-xs md:text-sm">₹{oldPrice}</span>
            <span className="text-green-400 font-bold text-sm md:text-base">₹{price}</span>
          </div>
        </div>
        
        <div className="flex flex-col gap-2 mt-3">
          <button 
            onClick={onAddToCart}
            className="bg-transparent border border-white/40 text-white py-1.5 px-3 text-xs md:text-sm rounded-full hover:bg-white/10 transition-all font-glacial"
          >
            Add to cart
          </button>
          <button 
            onClick={onBuyNow}
            className="bg-green-500/20 border border-green-400/50 text-green-400 py-1.5 px-3 text-xs md:text-sm rounded-full hover:bg-green-500/30 transition-all font-glacial font-medium"
          >
            Buy Now!
          </button>
        </div>
      </div>
    </div>
  );
}

// Main Product Section Component
export default function ProductSection({ products = [] }) {
  const [currentPage, setCurrentPage] = useState(0);
  const [productsPerPage, setProductsPerPage] = useState(2);
  
  // Update productsPerPage based on screen size
  useEffect(() => {
    const handleResize = () => {
      setProductsPerPage(window.innerWidth >= 768 ? 4 : 2);
    };
    
    // Set initial value
    handleResize();
    
    // Add event listener
    window.addEventListener('resize', handleResize);
    
    // Clean up
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  
  // Calculate total pages
  const totalPages = Math.ceil(products.length / productsPerPage);
  
  // Get current page products
  const currentProducts = products.slice(
    currentPage * productsPerPage, 
    (currentPage + 1) * productsPerPage
  );
  
  // Handle page change
  const changePage = (pageIndex) => {
    setCurrentPage(pageIndex);
  };

  return (
    <section className="relative py-6 px-4 md:py-20 md:px-10 overflow-hidden flex flex-row justify-center gap-2 md:gap-4 min-h-[400px] md:min-h-[600px]">
      {/* NEW ARRIVAL Vertical Text */}
      <div className="w-1/6 md:w-1/5 z-10 flex items-center justify-center">
        <div
          className="rotate-180 text-white/60 tracking-[0.3em] text-lg md:text-6xl lg:text-7xl flex items-center justify-center font-bold w-full h-full"
          style={{ writingMode: "vertical-rl" }}
        >
          NEW ARRIVAL...
        </div>
      </div>

      {/* Main Content Area */}
      <div className="flex flex-col justify-start w-5/6 md:w-4/5 space-y-4 md:space-y-6">
        {/* Just dropped header */}
        <div className="relative z-10 flex items-center">
          <span className="text-red-500 mr-2 text-lg md:text-2xl">✗</span>
          <h2 className="text-lg md:text-4xl font-schoolbell text-yellow-300 drop-shadow-[0_0_10px_rgba(255,255,0,0.5)]">
            Just dropped...
          </h2>
        </div>
      
        {/* Product Grid - Mobile: 1 column, Desktop: 2 columns */}
        <div className="relative z-10 grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6 p-4 md:p-8 rounded-3xl bg-black/30 backdrop-blur-sm border border-white/10">
          {currentProducts.map((product, index) => (
            <ProductCard
              key={`${currentPage}-${index}`}
              title={product.title}
              creator={product.creator}
              price={product.price}
              oldPrice={product.oldPrice}
              imageSrc={product.imageSrc}
              
              onAddToCart={() => console.log(`Added ${product.title} to cart`)}
              onBuyNow={() => console.log(`Buying ${product.title} now`)}
            />
          ))}
        </div>
      </div>

      {/* Page indicator dots */}
      {totalPages > 1 && (
        <div className="absolute right-4 md:right-8 top-1/2 transform -translate-y-1/2 flex flex-col gap-2 md:gap-3 z-10">
          {Array.from({ length: totalPages }).map((_, index) => (
            <button
              key={index}
              onClick={() => changePage(index)}
              className={`w-2 h-2 md:w-3 md:h-3 rounded-full transition-all ${
                currentPage === index
                  ? "bg-green-400 shadow-lg shadow-green-400/50"
                  : "bg-gray-400 opacity-50"
              }`}
              aria-label={`Go to page ${index + 1}`}
            />
          ))}
        </div>
      )}
    </section>
  );
}